--- a/drivers/net/wireless/realtek/rtl8723cs/include/osdep_service_linux.h	2022-04-06 10:26:31.478175041 +0300
+++ b/drivers/net/wireless/realtek/rtl8723cs/include/osdep_service_linux.h	2022-04-06 10:27:06.614259630 +0300
@@ -159,7 +159,11 @@
 	typedef int		thread_return;
 	typedef void*	thread_context;
 
-	#define thread_exit() complete_and_exit(NULL, 0)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(5, 17, 0)
+#define thread_exit() complete_and_exit(NULL, 0)
+#else
+#define thread_exit() kthread_complete_and_exit(NULL, 0)
+#endif
 
 	typedef void timer_hdl_return;
 	typedef void* timer_hdl_context;
--- a/drivers/net/wireless/realtek/rtl8723cs/os_dep/linux/rtw_proc.c	2022-04-06 10:28:32.082465392 +0300
+++ a/drivers/net/wireless/realtek/rtl8723cs/os_dep/linux/rtw_proc.c	2022-04-06 10:30:07.078694093 +0300
@@ -44,6 +44,8 @@
 #if (LINUX_VERSION_CODE < KERNEL_VERSION(3,10,0))
 #define PDE_DATA(inode) PDE((inode))->data
 #define proc_get_parent_data(inode) PDE((inode))->parent->data
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(5, 17, 0))
+#define PDE_DATA(inode) pde_data(inode)
 #endif
 
 #if(LINUX_VERSION_CODE < KERNEL_VERSION(2,6,24))
--- a/drivers/net/wireless/realtek/rtl8723cs/include/ieee80211.h	2022-05-30 08:52:07.648129899 +0300
+++ b/drivers/net/wireless/realtek/rtl8723cs/include/ieee80211.h	2022-05-30 08:52:48.344303126 +0300
@@ -1390,18 +1390,18 @@
 (((Addr[2]) & 0xff) == 0xff) && (((Addr[3]) & 0xff) == 0xff) && (((Addr[4]) & 0xff) == 0xff) && \
 (((Addr[5]) & 0xff) == 0xff))
 #else
-extern __inline int is_multicast_mac_addr(const u8 *addr)
+static __inline int is_multicast_mac_addr(const u8 *addr)
 {
         return ((addr[0] != 0xff) && (0x01 & addr[0]));
 }
 
-extern __inline int is_broadcast_mac_addr(const u8 *addr)
+static __inline int is_broadcast_mac_addr(const u8 *addr)
 {
 	return ((addr[0] == 0xff) && (addr[1] == 0xff) && (addr[2] == 0xff) &&   \
 		(addr[3] == 0xff) && (addr[4] == 0xff) && (addr[5] == 0xff));
 }
 
-extern __inline int is_zero_mac_addr(const u8 *addr)
+static __inline int is_zero_mac_addr(const u8 *addr)
 {
 	return ((addr[0] == 0x00) && (addr[1] == 0x00) && (addr[2] == 0x00) &&   \
 		(addr[3] == 0x00) && (addr[4] == 0x00) && (addr[5] == 0x00));
