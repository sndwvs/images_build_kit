
source "$CWD/config/sources/rockchip.inc" || exit 1

SERIAL_CONSOLE_SPEED=1500000
SERIAL_CONSOLE=ttyS2

IMAGE_OFFSET=32768
BOOT_LOADER_BIN="idblock.bin"

RKBIN_SOURCE="https://github.com/radxa/rkbin.git"
RKBIN_DIR="rkbin-${SOCFAMILY}"
RKBIN_BRANCH="master::"

BOOT_LOADER_SOURCE="https://github.com/radxa/u-boot.git"
BOOT_LOADER_DIR="u-boot-${SOCFAMILY}"
BOOT_LOADER_BRANCH="stable-5.10-rock5::"
DDR_BLOB=${SOCFAMILY}_ddr_lp4_2112MHz_lp5_2736MHz_v1.07.bin
MINI_LOADER_BLOB=

ATF=yes
ATF_PLAT=$SOCFAMILY


case ${BOARD_NAME} in
    rock_5*|station_*2)
        BL31_BLOB=rk3588_bl31_v1.25.elf
        OPTEE_BLOB=rk3588_bl32_v1.09.bin
        BOOT_LOADER_BUILD_TYPE="tpl-atf-blob"
    ;;
esac


case $KERNEL_SOURCE in
    legacy)
            SERIAL_CONSOLE=ttyFIQ0
            LINUX_SOURCE="https://github.com/radxa/kernel.git"
            KERNEL_BRANCH="stable-5.10-rock5::"
            KERNEL_DIR="linux-$SOCFAMILY-$KERNEL_SOURCE"
    ;;
    next)
            LINUX_SOURCE="https://gitlab.com/pgwipeout/linux-next.git"
            KERNEL_BRANCH="quartz64-v5.19::"
            KERNEL_DIR="linux-$SOCFAMILY-$KERNEL_SOURCE-${BOARD_NAME}"
    ;;
esac



build_img() {
    local IMAGE="$1"

    [[ -z "$IMAGE" ]] && exit 1

    message "" "build" "image: $IMAGE"

    LOOP=$(losetup -f)

    losetup $LOOP $SOURCE/$IMAGE.img || exit 1

    message "" "create" "partition"
#    echo -e "\ng\nn\n1\n$IMAGE_OFFSET\n+16M\nt\n11\nn\n2\n\n+256M\nt\n2\n1\nn\n\n\n\nw" | fdisk $LOOP >> $LOG 2>&1 || true
#    echo -e "\nx\nn\n1\nuboot\nr\nw" | fdisk $LOOP >> $LOG 2>&1 || true
    echo -e "\ng\nn\n1\n$IMAGE_OFFSET\n+512M\nt\n1\nn\n2\n\n\nw" | fdisk $LOOP >> $LOG 2>&1 || true

    partprobe $LOOP >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1

    message "" "create" "filesystem"
#    mkfs.ext4 -F -m 0 ${LOOP}p2 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
#    mkfs.ext4 -F -m 0 -L linuxroot ${LOOP}p3 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    mkfs.ext4 -F -m 0 -L boot ${LOOP}p1 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    mkfs.ext4 -F -m 0 -L linuxroot ${LOOP}p2 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    # set UUID
    echo y | tune2fs -U ${UUID_BOOT_FS_EXT4} ${LOOP}p1 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    echo y | tune2fs -U ${UUID_ROOT_FS_EXT4} ${LOOP}p2 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1

    message "" "tune" "filesystem"
    tune2fs -o journal_data_writeback ${LOOP}p2 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    tune2fs -O ^has_journal ${LOOP}p2 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    e2fsck -yf ${LOOP}p2 >> $LOG 2>&1 || (message "err" "details" && exit 1) || exit 1

    message "" "create" "mount point and mount image"

    mkdir -p $SOURCE/image
    mount ${LOOP}p2 $SOURCE/image
    mkdir -p $SOURCE/image/boot
    mount ${LOOP}p1 $SOURCE/image/boot

    write_uboot $LOOP

    message "" "copy" "data to image"
    rsync -a "$SOURCE/$IMAGE/" "$SOURCE/image/"

    umount $SOURCE/image/boot
    umount $SOURCE/image

    if [[ -d $SOURCE/image ]]; then
        rm -rf $SOURCE/image
    fi
    losetup -d $LOOP

    if [[ -f $SOURCE/$IMAGE.img ]]; then
        mv $SOURCE/$IMAGE.img $BUILD/$OUTPUT/$IMAGES
    fi

    message "" "done" "build image"
}

