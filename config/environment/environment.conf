
CPUS=$(grep -c 'processor' /proc/cpuinfo)
CTHREADS=" -j$(($CPUS + $CPUS/2)) ";

#---------------------------------------------
# environment
#---------------------------------------------
BUILD="$CWD/build"
SOURCE="$BUILD/source"
PKG="pkg"
OUTPUT="output"
TOOLS="tools"
IMAGES="images"
LOG="$SOURCE/build.log"
LC_MESSAGES=C

# use mainline kernel mirror
USE_NEXT_KERNEL_MIRROR=${USE_NEXT_KERNEL_MIRROR:-"yes"}
# use uboot mirror
USE_UBOOT_MIRROR=${USE_UBOOT_MIRROR:-"no"}
# use slarm64 mirror
USE_SLARM64_MIRROR=${USE_SLARM64_MIRROR:-"no"}
# add firmware
FIRMWARE=${FIRMWARE:-"yes"}
# image compression
IMAGE_COMPRESSION=${IMAGE_COMPRESSION:-"yes"}
# setting up the NTP server
NTP=${NTP:-"yes"}
# setting up the NetworkManager service
NETWORKMANAGER=${NETWORKMANAGER:-"yes"}
# kernel source type legacy/next, next - default
KERNEL_SOURCE=${KERNEL_SOURCE:-"next"}
# download required components
DOWNLOAD_SOURCE_BINARIES=${DOWNLOAD_SOURCE_BINARIES:-"no"}
# removing donwload/built components
CLEAN=${CLEAN:-"no"}
# compilation of all required components
COMPILE_BINARIES=${COMPILE_BINARIES:-"no"}
# create a GUI image
DESKTOP_SELECTED=${DESKTOP_SELECTED:-"no"}
# configuration linux distributions
DISTRS="slackwarearm slarm64 crux-arm"
# type of assembly of images: server and a choice from the list of DE
DISTR_IMAGES=server

# UUID boot for fs ext4
UUID_BOOT_FS_EXT4="5c205338-1b02-4bc9-a396-dc0fe556357f"
# UUID boot for fs vfat
UUID_BOOT_FS_VFAT="2863-B1BC"
# UUID boot for fs ext4
UUID_ROOT_FS_EXT4="32539e08-a5c0-4084-9f32-0932043d95e3"


#---------------------------------------------
# clear log
#---------------------------------------------
if [[ -e $LOG ]]; then
    echo -n > $LOG
fi
