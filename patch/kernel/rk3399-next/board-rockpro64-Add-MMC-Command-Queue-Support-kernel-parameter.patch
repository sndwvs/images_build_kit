From 686e1f1aa461afd4100a18f0374a59e86b23069b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jari=20H=C3=A4m=C3=A4l=C3=A4inen?= <nuumiofi@gmail.com>
Date: Mon, 19 Nov 2018 13:20:39 +0200
Subject: [PATCH] mmc: core: Add MMC Command Queue Support kernel parameter

This parameter offers a workaround for cards that report command queue
(CMDQ) support but don't work correctly when CMDQ is enabled. At least
some ROCKPro64 + Foresee (32GB) eMMC card combinations have trouble
working correctly. Setting mmc_cmdqueue=off in kernel command line
disables CMDQ support and may help with troublesome hardware.
---
 .../admin-guide/kernel-parameters.txt         |  8 +++++
 drivers/mmc/core/mmc.c                        | 29 ++++++++++++-------
 2 files changed, 27 insertions(+), 10 deletions(-)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index aefd358a5ca36..e5c2b1566e8e1 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -2506,6 +2506,14 @@
 			log everything. Information is printed at KERN_DEBUG
 			so loglevel=8 may also need to be specified.
 
+	mmc_cmdqueue= [MMC]
+			Enable or disable MMC command queue (CMDQ) support. When
+			enabled MMC driver will try to enable CMDQ for cards that
+			support it. When disabled CMDQ will not be enabled for any
+			card.
+			Format: <bool>  (1/y/on=enable, 0/n/off=disable)
+			default: enabled
+
 	module.sig_enforce
 			[KNL] When CONFIG_MODULE_SIG is set, this means that
 			modules without (valid) signatures will fail to load.
diff --git a/drivers/mmc/core/mmc.c b/drivers/mmc/core/mmc.c
index 55997cf84b39f..2c69a7cbe8077 100644
--- a/drivers/mmc/core/mmc.c
+++ b/drivers/mmc/core/mmc.c
@@ -9,7 +9,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
-
+#include <linux/moduleparam.h>
 #include <linux/err.h>
 #include <linux/of.h>
 #include <linux/slab.h>
@@ -65,6 +65,10 @@ static const unsigned int taac_mant[] = {
 		__res & __mask;						\
 	})
 
+/* Enable / disable command queue support */
+static bool mmc_cmdqueue_support = true;
+core_param(mmc_cmdqueue, mmc_cmdqueue_support, bool, S_IRUGO);
+
 /*
  * Given the decoded CSD structure, decode the raw CID to our CID structure.
  */
@@ -1847,14 +1851,20 @@
 	 */
 	card->ext_csd.cmdq_en = false;
 	if (card->ext_csd.cmdq_support && host->caps2 & MMC_CAP2_CQE) {
-		err = mmc_cmdq_enable(card);
-		if (err && err != -EBADMSG)
-			goto free_card;
-		if (err) {
-			pr_warn("%s: Enabling CMDQ failed\n",
-				mmc_hostname(card->host));
-			card->ext_csd.cmdq_support = false;
-			card->ext_csd.cmdq_depth = 0;
+		if (mmc_cmdqueue_support) {
+			err = mmc_cmdq_enable(card);
+			if (err && err != -EBADMSG)
+				 goto free_card;
+			if (err) {
+				pr_warn("%s: Enabling CMDQ failed\n",
+					mmc_hostname(card->host));
+				card->ext_csd.cmdq_support = false;
+				card->ext_csd.cmdq_depth = 0;
+				err = 0;
+			}
+		} else {
+			pr_info("%s: CMDQ support disabled in kernel\n",
+				mmc_hostname(host));
 		}
 	}
 	/*
