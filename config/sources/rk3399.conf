
source "$CWD/config/sources/rockchip.inc" || exit 1

SERIAL_CONSOLE_SPEED=1500000

IMAGE_OFFSET=32768

#BOOT_LOADER_BIN="idbloader.img:idbloader_mmc.img:uboot.img:trust.img"
BOOT_LOADER_BIN="idbloader_mmc.img"

#case $KERNEL_SOURCE in
#    legacy)
#            URL_LINUX_SOURCE="https://gitlab.com/TeeFirefly"
#            LINUX_SOURCE="linux-kernel"
#            KERNEL_BRANCH="firefly"
#            KERNEL_DIR="linux-$SOCFAMILY-$KERNEL_SOURCE"
#    ;;
#    next)
#            URL_LINUX_SOURCE="https://github.com/rockchip-linux"
#            LINUX_SOURCE="kernel"
#            KERNEL_BRANCH="release-4.4"
#            KERNEL_DIR="linux-$SOCFAMILY-$KERNEL_SOURCE"
#    ;;
#esac


create_uboot()
{
    # U-Boot SPL, with SPL_BACK_TO_BROM option disabled SD
    dd if=$CWD/$BUILD/$SOURCE/$RKBIN/rk33/rk3399_ddr_800MHz_v1.08.bin of=ddr.bin bs=4 skip=1 >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    tools/mkimage -n rk3399 -T rksd -d ddr.bin idbloader.img >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    rm ddr.bin || exit 1
    cat $CWD/$BUILD/$SOURCE/$RKBIN/rk33/rk3399_miniloader_v1.06.bin >> idbloader.img || exit 1
    $CWD/$BUILD/$SOURCE/$RKBIN/tools/loaderimage --pack --uboot u-boot.bin uboot.img >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1

    # U-Boot SPL, with SPL_BACK_TO_BROM option disabled MMC
    tools/mkimage -n rk3399 -T rksd -d $CWD/$BUILD/$SOURCE/$RKBIN/rk33/rk3399_ddr_800MHz_v1.08.bin idbloader_mmc.img >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    cat $CWD/$BUILD/$SOURCE/$RKBIN/rk33/rk3399_miniloader_v1.06.bin >> idbloader_mmc.img || exit 1
}


write_uboot()
{
    message "" "write" "$BOOT_LOADER"
    # clear u-boot
#    dd if=/dev/zero of=$1 bs=1k count=1023 seek=1 status=noxfer >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    dd if=$CWD/$BUILD/$SOURCE/$BOOT_LOADER/idbloader.img of=$1 seek=64 status=noxfer >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    dd if=$CWD/$BUILD/$SOURCE/$BOOT_LOADER/uboot.img of=$1 seek=16384 status=noxfer >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
    dd if=$CWD/$BUILD/$SOURCE/$RKBIN/img/$SOCFAMILY/trust.img of=$1 seek=24576 status=noxfer >> $CWD/$BUILD/$SOURCE/$LOG 2>&1 || (message "err" "details" && exit 1) || exit 1
}

build_kernel_img()
{
    message "" "create" "kernel img"
    # create kernel for flash
    cd $CWD/$BUILD/$OUTPUT/$FLASH
    $CWD/$BUILD/$SOURCE/$RKBIN/tools/mkkrnlimg -a $CWD/$BUILD/$SOURCE/$KERNEL_DIR/arch/arm64/boot/Image kernel.img > /dev/null 2>&1 || exit 1
}


build_resource_img()
{
    message "" "create" "resource img"
    # create resource for flash
    cd $CWD/$BUILD/$OUTPUT/$FLASH
    $CWD/$BUILD/$SOURCE/$RKBIN/tools/resource_tool $CWD/$BUILD/$SOURCE/$KERNEL_DIR/logo.bmp \
    $CWD/$BUILD/$SOURCE/$KERNEL_DIR/arch/arm64/boot/dts/rockchip/$DEVICE_TREE_BLOB > /dev/null 2>&1 || exit 1
}
