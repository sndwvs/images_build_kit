--- a/drivers/net/phy/realtek.c	2019-08-13 20:09:01.745367560 +0300
+++ b/drivers/net/phy/realtek.c	2019-08-23 18:59:21.025927439 +0300
@@ -29,10 +29,26 @@
 #define RTL8211F_PAGE_SELECT	0x1f
 #define RTL8211F_TX_DELAY	0x100
 
+/* page 0 register 30 - interrupt indicators and SNR display register */
+#define RTL8201F_ISR		0x1e
+/* page 0 register 31 - page select register */
+#define RTL8201F_PSR		0x1f
+/* page 7 register 19 - interrupt, WOL enable, and LEDs function register */
+#define RTL8201F_IER		0x13
+
 MODULE_DESCRIPTION("Realtek PHY driver");
 MODULE_AUTHOR("Johnson Leung");
 MODULE_LICENSE("GPL");
 
+static int rtl8201f_ack_interrupt(struct phy_device *phydev)
+{
+	int err;
+
+	err = phy_read(phydev, RTL8201F_ISR);
+
+	return (err < 0) ? err : 0;
+}
+
 static int rtl821x_ack_interrupt(struct phy_device *phydev)
 {
 	int err;
@@ -54,6 +70,27 @@
 	return (err < 0) ? err : 0;
 }
 
+static int rtl8201f_config_intr(struct phy_device *phydev)
+{
+	int err;
+
+	phy_write(phydev, RTL8201F_PSR, 0x0007);		/* select page 7 */
+
+	if (phydev->interrupts == PHY_INTERRUPT_ENABLED)
+		err = phy_write(phydev, RTL8201F_IER, 0x3800 |
+				phy_read(phydev, RTL8201F_IER));
+	else
+		err = phy_write(phydev, RTL8201F_IER, ~0x3800 &
+				phy_read(phydev, RTL8201F_IER));
+
+	/* LED_sel[1:0] = 00 */
+	err = phy_write(phydev, RTL8201F_IER, ~0x30 & phy_read(phydev, RTL8201F_IER));
+
+	phy_write(phydev, RTL8201F_PSR, 0x0000);	/* back to page 0 */
+
+	return err;
+}
+
 static int rtl8211b_config_intr(struct phy_device *phydev)
 {
 	int err;
@@ -115,8 +152,28 @@
 	return 0;
 }
 
+
+static int rtl8201f_probe(struct phy_device *phydev)
+{
+	printk("brian phy in rtl8201f_probe \n");
+	rtl8201f_config_intr(phydev);
+	return 0;
+}
+
 static struct phy_driver realtek_drvs[] = {
 	{
+		.phy_id         = 0x001cc816,
+		.name           = "RTL8201F 10/100Mbps Ethernet",
+		.phy_id_mask    = 0x001fffff,
+		.features       = PHY_BASIC_FEATURES,
+		.flags          = PHY_HAS_INTERRUPT,
+		.config_aneg    = &genphy_config_aneg,
+		.read_status    = &genphy_read_status,
+		.ack_interrupt	= &rtl8201f_ack_interrupt,
+		.config_intr	= &rtl8201f_config_intr,
+		.probe			= &rtl8201f_probe,
+		.driver         = { .owner = THIS_MODULE,},
+	}, {
 		.phy_id         = 0x00008201,
 		.name           = "RTL8201CP Ethernet",
 		.phy_id_mask    = 0x0000ffff,
@@ -182,6 +239,7 @@
 module_phy_driver(realtek_drvs);
 
 static struct mdio_device_id __maybe_unused realtek_tbl[] = {
+	{ 0x001cc816, 0x001fffff },
 	{ 0x001cc912, 0x001fffff },
 	{ 0x001cc914, 0x001fffff },
 	{ 0x001cc915, 0x001fffff },
