--- a/drivers/net/wireless/realtek/rtl8723cs/os_dep/osdep_service.c	2021-03-28 17:18:57.126936423 +0300
+++ b/drivers/net/wireless/realtek/rtl8723cs/os_dep/osdep_service.c	2021-03-28 17:26:23.481558457 +0300
@@ -1934,7 +1934,9 @@
 { 
 	struct file *fp;
 	int ret = 0;
-	mm_segment_t oldfs;
+#ifdef set_fs
+ 	mm_segment_t oldfs;
+#endif
 	char buf;
  
 	fp=filp_open(path, O_RDONLY, 0); 
@@ -1942,12 +1944,15 @@
 		ret = PTR_ERR(fp);
 	}
 	else {
+#ifdef set_fs
 		oldfs = get_fs(); set_fs(KERNEL_DS);
-		
+#endif
+
 		if(1!=readFile(fp, &buf, 1))
 			ret = PTR_ERR(fp);
-		
+#ifdef set_fs
 		set_fs(oldfs);
+#endif
 		filp_close(fp,NULL);
 	}	
 	return ret;
@@ -1963,16 +1968,22 @@
 static int retriveFromFile(char *path, u8* buf, u32 sz)
 {
 	int ret =-1;
+#ifdef set_fs
 	mm_segment_t oldfs;
+#endif
 	struct file *fp;
 
 	if(path && buf) {
 		if( 0 == (ret=openFile(&fp,path, O_RDONLY, 0)) ){
 			DBG_871X("%s openFile path:%s fp=%p\n",__FUNCTION__, path ,fp);
 
+#ifdef set_fs
 			oldfs = get_fs(); set_fs(KERNEL_DS);
 			ret=readFile(fp, buf, sz);
 			set_fs(oldfs);
+#else
+			ret = readFile(fp, buf, sz);
+#endif
 			closeFile(fp);
 			
 			DBG_871X("%s readFile, ret:%d\n",__FUNCTION__, ret);
@@ -1997,16 +2008,22 @@
 static int storeToFile(char *path, u8* buf, u32 sz)
 {
 	int ret =0;
+#ifdef set_fs
 	mm_segment_t oldfs;
+#endif
 	struct file *fp;
 	
 	if(path && buf) {
 		if( 0 == (ret=openFile(&fp, path, O_CREAT|O_WRONLY, 0666)) ) {
 			DBG_871X("%s openFile path:%s fp=%p\n",__FUNCTION__, path ,fp);
 
+#ifdef set_fs
 			oldfs = get_fs(); set_fs(KERNEL_DS);
 			ret=writeFile(fp, buf, sz);
 			set_fs(oldfs);
+#else
+			ret = writeFile(fp, buf, sz);
+#endif
 			closeFile(fp);
 
 			DBG_871X("%s writeFile, ret:%d\n",__FUNCTION__, ret);
--- a/drivers/net/wireless/realtek/rtl8723cs/os_dep/linux/ioctl_cfg80211.c	2021-03-28 17:52:02.573984738 +0300
+++ b/drivers/net/wireless/realtek/rtl8723cs/os_dep/linux/ioctl_cfg80211.c	2021-03-28 17:51:09.724727313 +0300
@@ -347,14 +347,18 @@
 
 static u64 rtw_get_systime_us(void)
 {
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,39))
-	struct timespec ts;
-	get_monotonic_boottime(&ts);
-	return ((u64)ts.tv_sec*1000000) + ts.tv_nsec / 1000;
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(4, 20, 0))
+        ktime_t ts;
+        ts = ktime_get_boottime();
+        return do_div(ts, 1000);        
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 39))
+        struct timespec ts;
+        get_monotonic_boottime(&ts);
+        return ((u64)ts.tv_sec*1000000) + ts.tv_nsec / 1000;
 #else
-	struct timeval tv;
-	do_gettimeofday(&tv);
-	return ((u64)tv.tv_sec*1000000) + tv.tv_usec;
+        struct timeval tv;
+        do_gettimeofday(&tv);
+        return ((u64)tv.tv_sec*1000000) + tv.tv_usec;
 #endif
 }
 
